<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.team1.project.dao.MemberDao">
	
	
<!--  	<select id="login" resultType="com.team1.project.dto.MemberDTO"> 
 		SELECT * from member
 		where member_id= #{member_id}
	</select>
 -->
	
	<select id="findByEmail" resultType="com.team1.project.dto.MemberDTO">
		select * from
		member
		where email = #{email}
	</select>
	
	
	<!-- 아이디로 회원 찾기 -->
	<select id="findById" resultType="com.team1.project.dto.MemberDTO">
		select * from
		member
		where member_id = #{member_id}
	</select>	
	
	
	<update id="loginCountInc">
		update member set
			logincnt = logincnt + 1
			<choose>
				<when test="logincnt > 5 ">
					, ACCOUNTLOCKED = 'Y'
				</when>
				<otherwise>
					, ACCOUNTLOCKED = 'N'
				</otherwise>
			</choose>
			where member_id = #{member_id}
	</update>
	
	<update id="loginCountClear">
		update member set
			logincnt = 0
			,ACCOUNTLOCKED = 'N'
		where member_id = #{member_id}  
	</update>
	
	
	   	<insert id="insertMember" >
		insert into member (
			member_id
			,name
			,phone
			,gender
			,email
			,pwd
			,oauth
			,age
			,roles
			,logincnt
			,last_login_time
			,accountexpired
			,accountlocked
			,profile_img
			,nickname

		) values (
			#{member_id}
			,#{name}
			,#{phone}
			,#{gender}
			,#{email}
			,#{pwd}
			,#{oauth}
			,#{age}
			,#{roles}
			,#{loginCnt}
			,#{last_login_time}
			,#{accountExpired}
			,#{accountLocked}
			,#{profile_img}
			,#{nickname}
		) 
	</insert>
	
	<update id="encodingPwd">
		update member set
		pwd = #{pwd}
		where member_id =#{member_id}
	</update>
	
	<!-- 기존 회원인지 체크하기 -->
	<select id="checkMember" resultType="int">
		select count(*) member
		where member_id=#{member_id}
	</select>
	
	<!-- 마지막 로그인 시간  -->
	<update id="updateMemberLastLogin">
		update member set 
			last_login_time = SYSTIMESTAMP
		where member_id = #{member_id}  
	</update>
	
	<!-- 회원 정보 수정하기 -->
	<update id="modify" >
		UPDATE member
		SET name=#{name},
		    pwd=#{pwd},
		    phone=#{phone},
		    email=#{email},
		    nickname=#{nickname}
		WHERE member_id=#{member_id}
	</update>

	<!-- 관리자 -->
	
	<!-- 회원리스트 가져오기 -->
    <select id="memberList" resultType="com.team1.project.dto.MemberDTO" parameterType="com.team1.project.dto.MemberDTO" fetchSize="1000">
    <![CDATA[
    SELECT
    	ROWNUM + #{startNo} -1 AS nrow,
        member_id,
        name,
        phone,
        email,
        age,
        gender,
        status,
        reportcnt
    FROM (
        SELECT
            ROWNUM AS nrow,
            mm.*
        FROM (
            SELECT
                m.*
            FROM 
                member m
            ORDER BY status DESC
        ) mm
        WHERE ROWNUM <= #{endNo}
    )
    WHERE nrow BETWEEN #{startNo} AND #{endNo}
    ]]>
    </select>

	<select id="getTotalCount" resultType="int">
      select count(*)
      from member
    </select>
	
	<!-- 관리자 계정 가져오기 -->
	<select id="adminList" parameterType="com.team1.project.dto.MemberDTO" resultType="com.team1.project.dto.MemberDTO">
	    SELECT * FROM member WHERE roles LIKE '%Admin'
	</select>

	<!-- 관리자 회원 정지 -->
	<update id="memberStop">
		UPDATE member 
		SET status = 'Y'
		WHERE member_id = #{member_id}
	</update>
	
	<!-- 관리자 회원 정지해제 -->
	<update id="memberRelease">
		UPDATE member
		SET status = 'N'
		WHERE member_id = #{member_id}
	</update>
	
	<!-- 관리자 월별 가입자 현황 추출 -->
	<select id="monthMember" parameterType="com.team1.project.dto.MemberDTO" resultType="com.team1.project.dto.MemberDTO">
	    SELECT TO_CHAR(REGISTER_TIME, 'MM') AS MONTH,
	           COUNT(*) AS SIGNUP_COUNT
	    FROM member
	    GROUP BY TO_CHAR(REGISTER_TIME, 'MM')
	    ORDER BY TO_CHAR(REGISTER_TIME, 'MM')
	</select>
	
	<select id="totalMembers" resultType="java.lang.Integer">
	    SELECT 
	        COUNT(*) AS TOTAL_MEMBERS
	    FROM 
	        member
	    WHERE 
	        TO_CHAR(REGISTER_TIME, 'YYYY') = TO_CHAR(SYSDATE, 'YYYY')
	</select>
	
	<!-- 오늘 가입한 인원 추출 -->
	<select id="todayRegister" parameterType="com.team1.project.dto.MemberDTO" resultType="com.team1.project.dto.MemberDTO">
	    SELECT COUNT(*) AS todayRegister
	    FROM member
	    WHERE TO_CHAR(register_time, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD')
	</select>
</mapper>